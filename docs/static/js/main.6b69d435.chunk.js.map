{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","fixed_height_downsampled","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","index","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAehD,OACE,oCACE,0BAAMC,SATW,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,QAAU,GAC9BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,SAOnC,2BACEC,KAAK,OACLC,MAAOT,EACPU,YAAY,YACZC,SAlBkB,SAACR,GACzBF,EAAcE,EAAES,OAAOH,a,uBCRdI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,yBAAyBZ,QATxB,kBAYdM,GAZc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,yBAAKc,UAAU,4CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,GAAS,oBCFNO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAAAC,GACrBC,QAAQC,IAAIF,GACZH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDdmBO,CAAa5B,GAA/BO,EAF+B,EAE/BA,KAAMa,EAFyB,EAEzBA,QAEd,OACE,oCACE,wBAAIJ,UAAU,uCAAuChB,GAEnDoB,GAAW,uBAAGJ,UAAU,oCAAb,gBAGVI,GAA2B,IAAhBb,EAAKf,QAAgB,wBAAIwB,UAAU,sCAAd,qBAEnC,yBAAKA,UAAU,YAEXT,EAAKE,KAAI,SAACC,EAAKmB,GAAN,OACP,kBAAC,EAAD,eACEC,IAAKpB,EAAIC,IACLD,UElBLqB,EAAe,WAAO,IAAD,EAEI9C,mBAAS,CAAC,WAFd,mBAEzB+C,EAFyB,KAEbhD,EAFa,KAKhC,OAFA0C,QAAQC,IAAIK,GAGV,oCACE,yBAAKhB,UAAU,UACb,kDACA,kBAAC,EAAD,CAAahC,cAAeA,IAC5B,0CACA,4BAEIgD,EAAWvB,KAAI,SAAChB,GAAD,OACb,kBAAC,EAAD,CAASqC,IAAKrC,EACZO,SAAUP,WCZ1BwC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.6b69d435.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length >= 2) {\r\n      setCategories(cat => [inputValue, ...cat]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          placeholder=\"Buscar...\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=16&api_key=gmfZ2iVHaBtSD1pd0w6iVNXa6YC68447`\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.fixed_height_downsampled.url\r\n    }\r\n  })\r\n  return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInUp\">\r\n      <img src={url} alt={title}></img>\r\n      <p>{title || '<<Sin nombre>>'}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"animate__animated animate__fadeInUp\">{category}</h2>\r\n      {\r\n        loading && <p className=\"animate__animated animate__flash\">Cargando...</p>\r\n      }\r\n      {\r\n        !loading && data.length === 0 && <h3 className=\"animate__animated animate__flipInX\">No hay resultados</h3>\r\n      }\r\n      <div className=\"cardGrid\">\r\n        {\r\n          data.map((img, index) => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img}\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(imgs => {\r\n      console.log(imgs);\r\n      setState({\r\n        data: imgs,\r\n        loading: false\r\n      });\r\n    })\r\n  }, [category]);\r\n\r\n  return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Naruto']);\r\n  console.log(categories);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"center\">\r\n        <h1>BuscaGifs | Ewardo</h1>\r\n        <AddCategory setCategories={setCategories} />\r\n        <h3>Resultados</h3>\r\n        <ol>\r\n          {\r\n            categories.map((cat) => (\r\n              <GifGrid key={cat}\r\n                category={cat} />\r\n            ))\r\n          }\r\n        </ol>\r\n      </div>\r\n\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}